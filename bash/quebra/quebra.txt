**ABSTRACT
**The system can not have high assurance if it has poor security,
and Thus, requirements for high assurance systems will
logically include security requirements as well as the
availability, reliability, and robustness requirements.
Unlike
typical
functional
requirements,
security
**Potentially requirements can be highly reusable, Especially
if the specified instances of reusable templates. this paper
discusses the value of reusable parameterized templates for
specifying security requirements, Provides an example of
such a template and its associated usage, and outlines an
asset-based analysis approach for Determining the
**Appropriate current parameters to use When reusing
parameterized templates to specify security requirements.
**keywords
**Security requirements, requirements analysis, requirements
specification, reusable requirements

**SECURITY REQUIREMENTS
**Functionality and its associated functional requirements trend to vary greatly between applications, across Especially different application domains.
**Look at any two requirements specifications, and the main difference between Them will almost always be in the content and size of Their sections  pecifying functional requirements. Thus, the functional requirements for an embedded avionics
application and an ecommerce website may have almost
nothing in common. However, the same can not be said
about Their security requirements, Which trend to exhibit far
less variability. After all, BOTH avionics applications and
ecommerce applications need to specify levels of
identification, authentication, authorization, integrity,
privacy, etc.
**At the highest level of abstraction, every application Tends
to have the same basic kinds of vulnerable assets (eg,
date, communications, services, hardware components, and
personnel). Similarly, These vulnerable assets trend to be
subject to the same basic kinds of security Threats (eg,
theft, vandalism, unauthorized disclosure, destruction,
fraud, extortion, espionage, trespass, etc.) from attacks by
the same basic kinds of attackers (eg, hackers, crackers,
disgruntled employees, international cyber-terrorists,
industrial spies, governmental spies, foreign military, etc.)
who can be profiled with motivations and Their typical
levels of expertise and tools. Whereas the specific type of
attack (eg, password sniffing, spoofing, viruses) may vary
greatly depending on the architecture under attack, the
similarity of Threats and attackers Tends to lead to
**Considerable uniformity When it comes to the architectural
security mechanisms (eg, user IDs, passwords, encryption,
firewalls, antivirus software, intrusion detection systems,
etc.) que are used to protect These assets from the Threats
posed by These attackers.
**And security requirements trend to be even more
**Their standardized than associated security mechanisms.
**For any given Beheerder set of requirements, an architect can and
shouldnt Typically identify and evaluate multiple different
architectures and architectural mechanisms before Selecting
what he or she thinks will be the optimum way of fulfilling
the requirements. Thus, there are many ways for an Often
architecture or security team to address the specific kind of
security requirement.
**For example, to address the
identification and authentication (ie, verification of
identification) requirements, one has Several choices of
architectural mechanisms beyond user IDs and passwords.
**Specifically, architects and engineers can base security
identification and authentication mechanisms on:
**• Who You Say You Are:
**-
Name, user identifier, or national identifier (eg,
social security number).
**• What You Know:
**-
Your password or personal identification number
(PIN).
**-
Relatively private personal information such as the
last four digits of your social security number, your
mother's maiden name, the name of your pet, etc.
**• What You Have:
**-
Digital possessions such as a digital certificate or
token.

**-
Physical possessions such as an employee ID card, the
hardware key, or smart card enabled with the public
key infrastructure (PKI).
**• Who You Are:
**-
Physiological traits (eg, finger print, hand print,
face recognition, iris recognition, and retina scan).
**-
**Behavioral characteristics (eg, voice pattern,
signature style, and keystroke dynamics).
**Yet teams requirements should not constrain the
architecture and security teams by specifying unnecessary
**Security Architecture mechanisms. They shouldnt rather
specify what is needed (eg, Certain required level of
**Identification and
authentication)
rather
than the
architectural security mechanisms by Which They shouldnt be
achieved. This results in Significantly more uniformity in
security requirements than in security mechanisms and
associated architectures.
**Like any other type of quality requirement, security
requirements shouldnt be based on an underlying quality
model [1] [2] [3]. Security is a quality factor (ie, attribute,
characteristic, or aspect), and it can be decomposed into
underlying quality subfactors [3] [4] such as:
**• Identification, Which is the degree to Which the thing
Identifies its externals (eg, human users and external
applications) before interacting with Them.
**• Authentication, Which is the degree to Which something
Verifies (ie, CONFIRMS) the asserted identity of its
externals (eg, human users and external applications)
before interacting with Them.
**• Authorization, Which is the degree to Which access and
usage privileges of externals exist and are authenticated
enforced.
**• Immunity, Which is the degree to Which the thing protects
itself from infection by unauthorized malicious programs
(eg, computer viruses, worms, Trojan horses, and
malicious scripts).
**• Integrity, Which is the degree to Which communications
or [data, hardware, or software] components are
protected from intentional corruption (eg, via
unauthorized creation, modification, deletion, or replay).
**• Intrusion Detection, Which is the degree to Which
attempted or successful access or modification by
intruders (ie, unauthorized Individuals or programs) is
detected, recorded, and Notified.
**• nonRepudiation, Which is the degree to Which the party to
an interaction (eg, message, transaction) is Prevented
from successfully denying having participated in all or
part of the interaction.
**• Privacy (aka, confidentiality), Which is the degree to
Which sensitive data and communications are kept
private from unauthorized Individuals and programs.
**• Security Auditing, Which is the degree to Which security
personnel are enabled to audit the status and use of
security mechanisms by analyzing security-related
events.
**• Survivability, Which is the degree to Which the thing
continues to Fulfill its mission by providing essential
services in a timely Manner in spite of the presence of
attacks.
**• Physical Protection, Which is the degree to Which the
thing protects itself from physical assault.
Whereas functional requirements can range over the entire
gamut of human imagination, security requirements specify
the required amount of the security sub-factor and are quite Thus
limited in scope.
**One form of reuse of security
**Then requirements is found in the reuse of the security
subfactors as a basis for organizing and Identifying
different kinds of security requirements. For each security
sub-factor in the quality model, there can be multiple
criteria (ie descriptions) que describe the existence of
que sub-factor and measures (eg, the percent of users
identified) que can be used to measure the degree of
existence of sub-factor que [5]. The security requirement can
**Thus it is defined as a specification of the minimum amount of
the security sub-factor stated in terms of the security criterion
and its associated measure. Thus, one form of reuse When
specifying measurable and testable Therefore security
requirements is the reuse of parameterized criteria (eg,
**Involving the protection of valuable assets from attacks by
attackers) and Their associated measures (ie, ways to
quantify the minimum acceptable level of the criterion).
two
**REUSABLE
SECURITY
REQUIREMENTS
TEMPLATES
**Based on the preceding discussion, The Following facts
combine to strongly argue que highly reusable
requirements templates can be produced for reuse across
almost all applications and application domains:
**• Requirements. Security requirements are at a higher
level of
abstraction
than
security
architectural
mechanisms.
**• Security Subfactors. Only a small number of security
quality subfactors exist.
**• Measures. For each sub-factor security, only a small
number of associated measures exist.
**• Criteria. Although there are a large number Potentially
of application-specific security criteria, These can be
parameterized by:
**-
Asset. The valuable and vulnerable asset to be
protected by the security requirement. Although
different applications do not have the same assets,
They the trend to have the same kinds of assets. The
different assets of different applications are subject
to different levels of vulnerability.
**-
Threat. The threat the asset shouldnt be protected
against.
Although different applications are not
subject to the same Threats, but the trend to be subject
to the same kinds of Threats. And the Threats may
result in different negative outcomes if an associated
attack is successful.
**-
Attacker. Different applications trend to be targets
of different kinds of attackers with different profiles
(eg, motivation, experience, and resources) who
launch different kinds of attacks at different levels of
sophistication.
Nevertheless, the same kinds of
attackers with the same profiles trend to Occur over
and over.
**-
Situation. The situation is what Tends to be very
application specific and is Typically the state of the
application During the attack, the communications
que are occurring, the services are being que
requested, the date que is being accessed, and the
que transactions are in progress.
**Thus, applications trend to have similar classes of security
que requirements vary depending on the security sub-factor
being specified and the associated criterion and measure
chosen to specify the minimum acceptable amount of que
security sub-factor. Whereas the criticality and specific
parameters vary from application to application, the great
amount of reuse is available if one has the repository of
reusable security requirement templates que formalize the
commonality.
**This high potential reusability of security requirements is
very beneficial because most engineers have requirements
had the training in Identifying, analyzing, specifying, and
managing security requirements and most requirements
of teams in include subject matter experts in security.
**Thus, most current requirements specifications 1) are
totally silent Regarding security, 2) Merely specify that "The
application Shall be secure "or" Confidential data Shall be
kept private. ", or 3) specify commonly-used security
mechanisms (eg, encryption and firewalls) the architectural
constraints. In the first case, security Too Often falls
through the cracks and may (or may not) be enquiry.c
**Addressed During architecting (or even later When it is much
more expensive and Difficult to be added to an existing
que architecture was not built to support it). In the second
case, proper security may still fall through the cracks and
**Often leaves the customer with the unjustified feeling que
They have adequately required security even though
specifying that "The application Shall be secure" is hardly the
testable requirement. And the third case may unnecessarily
tie the architecture team's hands by specifying an
inappropriate security mechanism (eg, passwords rather
than biometrics). Whereas These problems may (or may
not) be mitigated by the proper security policy by developed
the security team, there is the guarantee que an Appropriate
security policy will be ready in time to influence the
architecture team and the Resulting application architecture.
**And even if the security policy is developed early enough,
there is the guarantee que its implicit security requirements
will be consistent with the many other functional and
quality requirements in the requirements specification.
**Ultimately, the best approach is to include Explicitly
specified security requirements with the other quality
requirements so que They can all be Analyzed, prioritized,
and traced, and so que trade-offs can be made ​​to Ensure que
all requirements are consistent and feasible. finally,
reusable templates for security requirements will help
requirements and security teams perform que current security
requirements are BOTH valuable and feasible.
**3 EXAMPLE TEMPLATE AND ITS USAGE
**As an example of a reusable template for specifying
security requirements, consider The Following template for
specifying integrity requirements:
**• "The [application / component / data center / business
unit] Shall protect the data it transmits from corruption
(eg, unauthorized addition, modification, deletion, or
replay) due to [unsophisticated / somewhat sophisticated
/ Sophisticated] attack During execution of [a set of
interactions / use cases] as indicated in [specified table]. "
**-
[Table of interactions / use cases versus minimum
acceptable level measurement].
Collaborating with the security team, the requirements team
Could reuse the preceding template to generate the
Following integrity requirements:
**• "The Global Personal Marketplace (GPM) system Shall
protect the data it transmits from corruption (eg,
unauthorized addition, modification, deletion, or replay)
due to unsophisticated attack During execution of the
Buyer use cases the indicated in the table following "
**Global Personal Marketplace
(GPM)
Buyer Use Cases
Minimum
Transmissions
Protected
from
corruption
Buyer Buys Item at Direct Sale
99.99%
Buyer Modifies Bid on Item
99.99%
Buyer Modifies Sealed Offer
99.99%
Buyer Places Bid on Item
99.99%
Buyer Places Sealed Offer at
Decreasing Price Sale
99.99%
Buyer Reads Buyer Guidelines
99%
Buyer Feedback about Registers
Seller
99.99%
...
...
GPM
Notifies
Buyer
of
99.9%

Acceptance of Offer Sealed
GPM Notifies Buyer of Being
outbid
99.9%
GPM Notifies Buyer of Canceled
Sale
99.9%
GPM Notifies Buyer of Relevant
Sale
99.9%
GPM Notifies Winning Buyer of
Auction Results
99.9%
**4 - REQUIREMENTS FOR SECURITY ANALYSIS
REQUIREMENTS
**The preceding sections Were Primarily concern with the
specification of security requirements using reusable
parameterized templates. But how one shouldnt determine
what current values ​​to use for These parameters? Typical
approaches analysis of requirements (eg, functional
decomposition, use case modeling) Were designed for the
analysis of functional requirements and are of little use
**When analyzing most security requirements. and although
misuse cases can help the analyst analyze attacks [6] [7]
and security use cases [8] can help the analyst understand
the system's response to Desired These attacks, they still the
not adequately support Determining the values ​​of all of the
template's parameters.
**So the question remains: how do you fill in the parameters
in the reusable templates? It is the author's contention que
any requirements analysis method for security requirements
shouldnt be asset-based [9]. Different applications have
different assets to be protected and failure to protect These
assets can result in negative outcomes ranging from minor
inconvenience to the potential of major lost of life and even
war. And different assets have different vulnerabilities and
are subject to different kinds of Threats due to different
kinds of attacks by different kinds of attackers. Thus the
requirements analysis for security requirements shouldnt
begin with an asset analysis.
**At the level highest, the requirements and security teams
Could collaborate to perform The Following general
procedure to analyze security requirements in an iterative,
incremental, parallel, and time-boxed Manner:
**1. Identify Valuable Assets. Identify the different kinds
of valuable assets (eg, data, communications,
services, hardware components, and personnel).
**Identification can be based on:
**-
The functional, date, and interface requirements,
**-
Interviews with stakeholders,
**-
Lists of assets generated During disaster recovery
planning, etc.
**2. Identify Threats. Identify the general kinds of Threats
(eg, theft, vandalism, fraud, unauthorized disclosure,
destruction, extortion, espionage, trespass, etc.) to
Which These assets may be subject. Identification can
It is based on:
**-
Reusable tables of common Threats and
**-
Essential (ie, level requirements) misuse cases.
**3. Identify Attackers Likely.
Identify the types of
attackers who threaten the most vulnerable assets.
Identification can be based on:
**-
Existing reusable attacker profiles (eg, in terms
of attacker motivation, experience level, and
resources).
**-
**The identified Threats to the valuable assets.
**4. Estimate Vulnerability. Based on Their associated
**Threats and attacker profiles, estimate how vulnerable
the assets would be to These Threats if security
requirements are not specified to protect Them (ie,
estimate the likelihood of a successful attack). only
**Gross estimates of relative vulnerabilities may be
possible because of limited empirical data.
**5. Determine Negative Outcomes. For each vulnerable
asset, determine the negative outcomes Which Could
if the result Threats against the asset Were to occur.
**6. Prioritize
Vulnerabilities.
prioritize
the
vulnerabilities are
que the most important
vulnerabilities (eg, in terms of outcome and
likelihood) are first handled Given the limited resources
of the requirements and security teams.
**7. Identify Relevant Situation. Identify each functional
requirement (eg, use case or use case path) Involving
the asset and determine if the security requirement is
needed.
**8. Consider Security sub-factor. For each relevant
situation, consider each sub-factor security from the
quality model and determine if the security requirement
of que type is needed to limit the associated
vulnerability to an acceptable level.
**9. Identify Relevant Template (s).
For each relevant
security sub-factor and situation, find the relevant
reusable template (s) for specifying requirements for
the relevant security sub-factor in terms of the criteria
relevant to the vulnerability in que situation. if the
relevant template exists, the requirements team can
analyze the situation using security use cases in order
to help produce such a template.
**10. Determine Security Criterion. For each relevant
template, determine the Appropriate security criterion
and enter its parameters into the template using
information about the situation.
**11. Determine Measure. Select the Appropriate measure
for measuring the existence of the chosen security
criterion from the quality model and enter the measure
into the template.
**12. Determine Required Level.
Based on the
vulnerability of the asset, select the minimum acceptable
level of the measure for that criterion to limit the
associated vulnerability to an acceptable level and
enter the required level of the measure into the
template. The cost-benefit analysis may be used to
Determine the Appropriate level of the measure.
**13. Specify Requirement. Instantiate the template based
on the current parameters from the three previous steps
to produce an actual security requirement.
The above process is only one of several That Could be used
to create security requirements based on the reuse of
parameterized templates for security use cases. more
important than the specific steps of the preceding process
or the order in Which These steps are Performed is the que
requirements and security teams use the documented process
**The Following with useful properties:
**1. It is based on the vulnerable assets to be protected and
the seriousness of the negative outcomes That Could
result if They are not protected.
**2. Achieves high quality models and reuse via
parameterized templates.
**3. Enables the requirements and security engineers to
Determine Appropriate values ​​for the parameters in the
templates.
**4. It addresses all significant issues including assets,
attackers, Threats, outcomes, and vulnerabilities.
**5. Ensures que at important types of security
**5 CONCLUSION
**As stated above, one solution to the problem of how to
analyze and specify security requirements is for the security
team to create and make available a set of parameterized
reusable templates que can be used by the requirements
team to engineer security requirements in a similar Manner
to other types of requirements. By using the asset-rigorous
based security requirements analysis method, the quality
and appropriateness of the security requirements will rise
and the Resulting architecture will be more Likely to have
**It has been designed from the beginning to support the enquiry.c
security requirements in addition to the functional
requirements and the other quality requirements such as
availability, capacity, extensibility, internationalization,
interoperability, maintainability, performance, portability,
reliability, robustness, usability, etc.). The publication of
such requirements templates has the potential for greatly
**Improving the quality of security requirements in current
requirements specifications.
**The members of the workshop RHAS'03 can discuss ways
to create, evaluate, and parameterized templates for reuse
security requirements. They can Also discuss ways to
**Improve the requirements analysis approach for security
Suggested requirements in this paper.

